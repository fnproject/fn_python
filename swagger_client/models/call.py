# coding: utf-8

"""
    fn

    The open source serverless platform.

    OpenAPI spec version: 0.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Call(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'app_name': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'started_at': 'datetime',
        'completed_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'app_name': 'app_name',
        'path': 'path',
        'created_at': 'created_at',
        'started_at': 'started_at',
        'completed_at': 'completed_at'
    }

    def __init__(self, id=None, status=None, app_name=None, path=None, created_at=None, started_at=None, completed_at=None):
        """
        Call - a model defined in Swagger
        """

        self._id = None
        self._status = None
        self._app_name = None
        self._path = None
        self._created_at = None
        self._started_at = None
        self._completed_at = None

        if id is not None:
          self.id = id
        if status is not None:
          self.status = status
        if app_name is not None:
          self.app_name = app_name
        if path is not None:
          self.path = path
        if created_at is not None:
          self.created_at = created_at
        if started_at is not None:
          self.started_at = started_at
        if completed_at is not None:
          self.completed_at = completed_at

    @property
    def id(self):
        """
        Gets the id of this Call.
        Call UUID ID.

        :return: The id of this Call.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Call.
        Call UUID ID.

        :param id: The id of this Call.
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this Call.
        Call execution status.

        :return: The status of this Call.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Call.
        Call execution status.

        :param status: The status of this Call.
        :type: str
        """

        self._status = status

    @property
    def app_name(self):
        """
        Gets the app_name of this Call.
        App name that is assigned to a route that is being executed.

        :return: The app_name of this Call.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """
        Sets the app_name of this Call.
        App name that is assigned to a route that is being executed.

        :param app_name: The app_name of this Call.
        :type: str
        """

        self._app_name = app_name

    @property
    def path(self):
        """
        Gets the path of this Call.
        App route that is being executed.

        :return: The path of this Call.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Call.
        App route that is being executed.

        :param path: The path of this Call.
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """
        Gets the created_at of this Call.
        Time when call was submitted. Always in UTC.

        :return: The created_at of this Call.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Call.
        Time when call was submitted. Always in UTC.

        :param created_at: The created_at of this Call.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def started_at(self):
        """
        Gets the started_at of this Call.
        Time when call started execution. Always in UTC.

        :return: The started_at of this Call.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """
        Sets the started_at of this Call.
        Time when call started execution. Always in UTC.

        :param started_at: The started_at of this Call.
        :type: datetime
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """
        Gets the completed_at of this Call.
        Time when call completed, whether it was successul or failed. Always in UTC.

        :return: The completed_at of this Call.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """
        Sets the completed_at of this Call.
        Time when call completed, whether it was successul or failed. Always in UTC.

        :param completed_at: The completed_at of this Call.
        :type: datetime
        """

        self._completed_at = completed_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Call):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
