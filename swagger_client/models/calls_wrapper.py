# coding: utf-8

"""
    fn

    The open source serverless platform.

    OpenAPI spec version: 0.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CallsWrapper(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calls': 'list[Call]',
        'error': 'ErrorBody'
    }

    attribute_map = {
        'calls': 'calls',
        'error': 'error'
    }

    def __init__(self, calls=None, error=None):
        """
        CallsWrapper - a model defined in Swagger
        """

        self._calls = None
        self._error = None

        self.calls = calls
        if error is not None:
          self.error = error

    @property
    def calls(self):
        """
        Gets the calls of this CallsWrapper.

        :return: The calls of this CallsWrapper.
        :rtype: list[Call]
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """
        Sets the calls of this CallsWrapper.

        :param calls: The calls of this CallsWrapper.
        :type: list[Call]
        """
        if calls is None:
            raise ValueError("Invalid value for `calls`, must not be `None`")

        self._calls = calls

    @property
    def error(self):
        """
        Gets the error of this CallsWrapper.

        :return: The error of this CallsWrapper.
        :rtype: ErrorBody
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this CallsWrapper.

        :param error: The error of this CallsWrapper.
        :type: ErrorBody
        """

        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CallsWrapper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
