# coding: utf-8

"""
    IronFunctions

    The open source serverless platform.

    OpenAPI spec version: 0.1.29
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Route(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'image': 'str',
        'headers': 'dict(str, list[str])',
        'memory': 'int',
        'type': 'str',
        'format': 'str',
        'max_concurrency': 'int',
        'config': 'dict(str, str)',
        'timeout': 'int',
        'idle_timeout': 'int'
    }

    attribute_map = {
        'path': 'path',
        'image': 'image',
        'headers': 'headers',
        'memory': 'memory',
        'type': 'type',
        'format': 'format',
        'max_concurrency': 'max_concurrency',
        'config': 'config',
        'timeout': 'timeout',
        'idle_timeout': 'idle_timeout'
    }

    def __init__(self, path=None, image=None, headers=None, memory=None, type=None, format=None, max_concurrency=None, config=None, timeout=None, idle_timeout=None):
        """
        Route - a model defined in Swagger
        """

        self._path = None
        self._image = None
        self._headers = None
        self._memory = None
        self._type = None
        self._format = None
        self._max_concurrency = None
        self._config = None
        self._timeout = None
        self._idle_timeout = None

        if path is not None:
          self.path = path
        if image is not None:
          self.image = image
        if headers is not None:
          self.headers = headers
        if memory is not None:
          self.memory = memory
        if type is not None:
          self.type = type
        if format is not None:
          self.format = format
        if max_concurrency is not None:
          self.max_concurrency = max_concurrency
        if config is not None:
          self.config = config
        if timeout is not None:
          self.timeout = timeout
        if idle_timeout is not None:
          self.idle_timeout = idle_timeout

    @property
    def path(self):
        """
        Gets the path of this Route.
        URL path that will be matched to this route

        :return: The path of this Route.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Route.
        URL path that will be matched to this route

        :param path: The path of this Route.
        :type: str
        """

        self._path = path

    @property
    def image(self):
        """
        Gets the image of this Route.
        Name of Docker image to use in this route. You should include the image tag, which should be a version number, to be more accurate. Can be overridden on a per route basis with route.image.

        :return: The image of this Route.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Route.
        Name of Docker image to use in this route. You should include the image tag, which should be a version number, to be more accurate. Can be overridden on a per route basis with route.image.

        :param image: The image of this Route.
        :type: str
        """

        self._image = image

    @property
    def headers(self):
        """
        Gets the headers of this Route.
        Map of http headers that will be sent with the response

        :return: The headers of this Route.
        :rtype: dict(str, list[str])
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Sets the headers of this Route.
        Map of http headers that will be sent with the response

        :param headers: The headers of this Route.
        :type: dict(str, list[str])
        """

        self._headers = headers

    @property
    def memory(self):
        """
        Gets the memory of this Route.
        Max usable memory for this route (MiB).

        :return: The memory of this Route.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this Route.
        Max usable memory for this route (MiB).

        :param memory: The memory of this Route.
        :type: int
        """

        self._memory = memory

    @property
    def type(self):
        """
        Gets the type of this Route.
        Route type

        :return: The type of this Route.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Route.
        Route type

        :param type: The type of this Route.
        :type: str
        """
        allowed_values = ["sync", "async"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def format(self):
        """
        Gets the format of this Route.
        Payload format sent into function.

        :return: The format of this Route.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this Route.
        Payload format sent into function.

        :param format: The format of this Route.
        :type: str
        """
        allowed_values = ["default", "http", "json"]
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def max_concurrency(self):
        """
        Gets the max_concurrency of this Route.
        Maximum number of hot functions concurrency

        :return: The max_concurrency of this Route.
        :rtype: int
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """
        Sets the max_concurrency of this Route.
        Maximum number of hot functions concurrency

        :param max_concurrency: The max_concurrency of this Route.
        :type: int
        """

        self._max_concurrency = max_concurrency

    @property
    def config(self):
        """
        Gets the config of this Route.
        Route configuration - overrides application configuration

        :return: The config of this Route.
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Route.
        Route configuration - overrides application configuration

        :param config: The config of this Route.
        :type: dict(str, str)
        """

        self._config = config

    @property
    def timeout(self):
        """
        Gets the timeout of this Route.
        Timeout for executions of this route. Value in Seconds

        :return: The timeout of this Route.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this Route.
        Timeout for executions of this route. Value in Seconds

        :param timeout: The timeout of this Route.
        :type: int
        """

        self._timeout = timeout

    @property
    def idle_timeout(self):
        """
        Gets the idle_timeout of this Route.
        Hot functions idle timeout before termination. Value in Seconds

        :return: The idle_timeout of this Route.
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """
        Sets the idle_timeout of this Route.
        Hot functions idle timeout before termination. Value in Seconds

        :param idle_timeout: The idle_timeout of this Route.
        :type: int
        """

        self._idle_timeout = idle_timeout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Route):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
